import numpy as np 
import matplotlib.pylab as plt

#Hardcode specifics
c = 0.02
d = 0.8
r = 1/2*d
r_wc = 1/2*d - (c*d)
x1 = 0.44
y1 = -.8
n = 64  # number of fibers
X = np.linspace(-r, (2*n - 1) * x1 + r, 100000)


def find_path_length(X, r, x1=0):
    S = []
    for i in X:
        if r**2 - (i - x1)**2 >= 0: #make sure radical is real
            s_i = 2 * np.sqrt(r**2 - (i - x1)**2) #find path length 
            S.append(s_i) 
        else:
            S.append(0)
    return S

def overlap_percentage(x1, r): 
    return 1 - (x1 / (2 * r))

# Sum path lengths from all overlapping pairs
S_total = np.zeros_like(X)
for i in range(n):
    x_shift = i * (2*x1) #define x_shift since it changes per fiber
    S_total += find_path_length(X, r_wc, x1=x_shift)
    

o = overlap_percentage(x1, r) #storing overlap percentage 
total_length_mm = 2*n*d*o #finding total length of active region X using overlap percentage (this is likely wrong) 

theta = np.linspace(0, 2 * np.pi, 100) #creating circles for plot
x_circle = r * np.cos(theta) 
y_circle = r * np.sin(theta) 

active_xc = r_wc *np.cos(theta) #creating active circles for plot
active_yc = r_wc *np.sin(theta)

x_line = [min(X),max(X)] #creating a line for the average path length 
y_line = [np.average(S_total), np.average(S_total)]


fig, axs = plt.subplots(1, 3, figsize=(30, 5))

#Subplot of Single Fiber
axs[0].plot(x_circle, y_circle, color = 'blue')
axs[0].plot(active_xc, active_yc, color = 'red')
axs[0].set_xlabel("X-Position (mm)")
axs[0].set_ylabel("Y-Position (mm)")  
axs[0].set_aspect('equal')
axs[0].set_title("Single Fiber")
axs[0].grid(True)
axs[0].legend(title=f"The diameter of the active fiber is {2 * r_wc}mm\nAmount of diameter that is cladding @ {100*c}%: \n{round(2*r-2*r_wc,3)}mm")

#Subplot of fiber orientation 
for i in range(4):
    axs[1].plot(x_circle + (i)*x1, y_circle + (i)*y1, color = 'blue')
    axs[1].plot(active_xc + (i)*x1, active_yc + (i)*y1, color = 'red')
    axs[1].plot(i*x1, i*y1, 'ko')       

axs[1].set_xlabel("X-Position (mm)")
axs[1].set_ylabel("Y-Position (mm)")  
axs[1].set_aspect('equal')
axs[1].set_title("Fibers with offset")
axs[1].grid(True)

#Subplot of Pathlength 
axs[2].plot(X, S_total)
axs[2].plot(x_line,y_line, color = 'red')
axs[2].set_xlabel("X-Position (mm)")
axs[2].set_ylabel("Path Length (mm)")
axs[2].set_title(f"Cord Length vs X-Position, {round(o*100, 1)}% Overlap Ã—{n}")
axs[2].grid(True)
axs[2].legend(title=f"Total X Length: {round(total_length_mm, 2)} mm\nAverage path length per row: {round(np.average(S_total),3)}")


plt.tight_layout()
plt.show()

# Main loop over delta X values (spacing between pairs)
deltX = np.linspace(0.32, 0.8, 1000)  # Avoid division by zero
O = overlap_percentage(deltX, r)     # Overlap percentages
AvgS_total = np.zeros_like(deltX)    # Store average path lengths

# Calculate average path length for each overlap percentage 
for j_idx, j in enumerate(deltX):
    X = np.linspace(-r, (2 * n - 1) * j + r, 10000) defining x axis for the find pathlength function 
    S_total = np.zeros_like(X)
    for i in range(n):
        x_shift = i * (2 * j)
        S_total += find_path_length(X, r_wc, x1=x_shift)
        S_total += find_path_length(X, r_wc, x1=x_shift + j)
    AvgS_total[j_idx] = np.average(S_total) 

tot_length_ar = .2*n*d*O #this is most likely wrong

# Plotting
plt.figure(figsize=(10,5))
plt.plot(O * 100, AvgS_total)
plt.title("Average Path Length vs Overlap Percentage")
plt.xticks(np.arange(0, np.max(O) * 100, 5))
plt.xlabel("Overlap Percentage (%)")
plt.ylim(0, 3)
plt.ylabel("Average Path Length (mm)")
plt.grid(True)
plt.show()
